import sys

def to_roman(number):
    """
    Converts an integer to its Roman numeral representation.

    Args:
        number: The integer to convert.

    Returns:
        A string representing the Roman numeral.
    """
    if not isinstance(number, int) or not 0 < number <= 3999:
        raise ValueError("Input must be an integer between 1 and 3999.")

    # A list of tuples containing Roman numeral values and their symbols,
    # ordered from largest to smallest.
    roman_map = [
        (1000, 'M'),
        (900, 'CM'),
        (500, 'D'),
        (400, 'CD'),
        (100, 'C'),
        (90, 'XC'),
        (50, 'L'),
        (40, 'XL'),
        (10, 'X'),
        (9, 'IX'),
        (5, 'V'),
        (4, 'IV'),
        (1, 'I')
    ]

    result = ""
    for value, symbol in roman_map:
        # Append the symbol as long as the number is greater than or equal to the value.
        while number >= value:
            result += symbol
            number -= value
    
    return result

if __name__ == "__main__":
    print("Welcome to the Roman Numeral Converter!")
    print("Enter a number to convert, or type 'quit' to exit.")
    
    while True:
        user_input = input("Enter a number: ")
        
        if user_input.lower() == 'quit':
            print("Goodbye!")
            break
        
        try:
            decimal_number = int(user_input)
            roman_numeral = to_roman(decimal_number)
            print(f"The Roman numeral for {decimal_number} is {roman_numeral}")
            
        except ValueError as e:
            # This handles cases where the input is not a valid integer or is outside the valid range (1-3999).
            print(f"Error: {e}. Please enter a valid number or 'quit'.")
        except Exception as e:
            # Generic error handler for any other unexpected issues.
            print(f"An unexpected error occurred: {e}")

